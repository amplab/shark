<% escapeMarkup = false %>
#import(shark.execution.cg.row.CGOIUnion)
#import(shark.execution.cg.row.CGOIStruct)
<%@ import val obj: CGOIUnion %>
  public static class ${oiClassName} implements UnionObjectInspector {
    private static final List<ObjectInspector> list = Lists.newArrayList(new ObjectInspector[]{
      ${fields.map(_.createOI()).reduce(_+","+_)}
    });
    
    #for(i <- 0 until fields.length)
    private ${fields(i).writableClass()} cache_${delegate.name}${i} = new ${fields(i).writableClass()}();
    #end
    
    @Override
    public String getTypeName() {
      return ObjectInspectorUtils.getStandardUnionTypeName(this);
    }

    @Override
    public Category getCategory() {
      return Category.UNION;
    }

    @Override
    public List<ObjectInspector> getObjectInspectors() {
      return list;
    }

    @Override
    public byte getTag(Object o) {
      ${fullClassName()} a = (${fullClassName()})o;
      if (a == null || a.tag < 0) {
        return 0;
      } else {
        return (byte)(a.tag);
      }
    }
    #{var vf = Array.tabulate[(String, ()=>String)](fields.length){i=>fields(i).java2Writable("a." + delegate.name+"_"+i, "cache_%s%d".format(delegate.name, i))}}#
    @Override
    public Object getField(Object o) {
      ${fullClassName()} a = (${fullClassName()})o;
      if (a == null || a.tag < 0) {
        return null;
      } else {
      #for(i <- 0 until vf.length)
        if (a.tag == ${i}) {
          ${vf(i)._1}
          return cache_${delegate.name}${i};
        }
      #end
        else {
          throw new RuntimeException("couldn't find the tag " + a.tag);
        }
      }
    }
    // generate the tranform functions
    #for(f <- vf)
       ${f._2()}
    #end
    
#for(f<- fields)
   ${f.oiClass()}
#end
  }