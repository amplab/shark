<% escapeMarkup = false %>

#import(shark.execution.cg.row.CGRow)
#import(shark.execution.cg.row.CGField)
#import(shark.execution.cg.row.CGStruct)
#import(shark.execution.cg.row.CGUnion)
#import(shark.execution.cg.row.CGPrimitive)

<%@ import val isOutter: Boolean = false %>
<%@ import val struct: CGStruct %>

#if (true==isOutter)
package ${packageName};

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;
import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorUtils;
import org.apache.hadoop.hive.serde2.objectinspector.StructField;
import org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;
import org.apache.hadoop.hive.serde2.objectinspector.UnionObjectInspector;
import org.apache.hadoop.hive.serde2.objectinspector.primitive.LongObjectInspector;
import org.apache.hadoop.hive.serde2.objectinspector.primitive.StringObjectInspector;
import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
import org.apache.hadoop.io.Writable;

import com.google.common.collect.Lists;

import shark.execution.cg.row.helper.CGStructField;

public class ${oiClassName()} extends StructObjectInspector {
#else
public static class ${oiClassName()} extends StructObjectInspector {
#end
// customed StructField
// list of (field name, StructField class name, StructField class definition)
#{
var sfs = fields.map(f=>f.defStructField())
}#
#for(f<- sfs)
  ${f._3}
#end
  
  private static final HashMap<String, CGStructField> SF_MAP = new HashMap<String, CGStructField>(${sfs.length * 5});
  private static final ArrayList<CGStructField> SF_FIELDS = INITIAL_SF();

  private static ArrayList<CGStructField> INITIAL_SF() {
    ArrayList<CGStructField> fields = new ArrayList<CGStructField>(${sfs.length});
    
    #for(i <- 0 to sfs.length - 1)
    {
      CGStructField sf = new ${sfs(i)._2}(${i});
      SF_MAP.put("${sfs(i)._1}", sf);
      fields.add(sf);
    }
    #end
    return fields;
  }

#for(f<- fields)
#if(f.isInstanceOf[CGStruct] || f.isInstanceOf[CGUnion])
   ${f.oiClass()}
#end
#end
  
  protected ArrayList<Object> writables = initial_writables();
  
  public ArrayList<Object> initial_writables() {
    ArrayList<Object> list = new ArrayList<Object>(6);
    list.add(null);
    list.add(null);
    list.add(null);
    list.add(null);
    list.add(null);
    list.add(null);
    
    return list;
  }
  

  // the following is about the StructObjectInspector
  @Override
  public List<? extends CGStructField> getAllStructFieldRefs() {
    return SF_FIELDS;
  }

  @Override
  public StructField getStructFieldRef(String fieldName) {
    return SF_MAP.get(fieldName);
  }

  @Override
  public Object getStructFieldData(Object data, StructField fieldRef) {
    if (data == null) {
      return null;
    }
    return ((CGStructField)fieldRef).get(data);
  }

  @Override
  public List<Object> getStructFieldsDataAsList(Object data) {
    if (data == null) {
      return null;
    }
    
    ${cgClassName} struct = (${cgClassName})data;
    
    for(int i = 0; i < SF_FIELDS.size(); ++i) {
      writables.set(i, SF_FIELDS.get(i).get(struct));
    }
    
    return writables;
  }

  @Override
  public String getTypeName() {
    return ObjectInspectorUtils.getStandardStructTypeName(this);
  }

  @Override
  public Category getCategory() {
    return Category.STRUCT;
  }
}
