<% escapeMarkup = false %>
#import(shark.execution.CGOperator)
#import(shark.execution.cg.row.CGStruct)
#import(shark.execution.CGObjectOperator)
#import(shark.execution.FilterOperator)
#import(shark.execution.cg.row.CGExprContext)

<%@ import val cgo: CGOperator %>
<%@ import val op: FilterOperator %>
<%@ import val ctx: CGExprContext %>
<%@ import val cs: shark.execution.cg.row.ExecuteOrderedExprNode %>

package ${packageName};

import shark.execution.cg.OperatorExecutor;
import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;

#for(clazz <- ctx.imports)
import ${clazz};
#end

public class ${className} extends OperatorExecutor {
  
#for(property <- ctx.properties)
${property.toString}
#end

    @Override
    public ${ctx.inputRow.expr.struct.clazz} transform(Object input) {
#if(parentOperators(0).useCG)
    return (${ctx.inputRow.expr.struct.clazz})input;
#else
    return ${ctx.inputRow.expr.struct.clazz}.BUILD(this.inputOI, input);
#end
    }
    
   @Override
   public void init(ObjectInspector[] inputOIs) throws Exception {
   super.init(inputOIs);
#for(init <- ctx.initials)
${init.toString}
#end   
   } 
  
  @Override
  public Object evaluate(Object obj) throws Exception {
  // FilterOperator should call this.transform(), to be sure the output object is the CGRow object
    ${ctx.inputRow.expr.struct.clazz} ${ctx.inputRow.exprName} = (${ctx.inputRow.expr.struct.clazz})obj;
    ${ctx.outputObjectName} = false;
    ${cs.code(ctx)}
    
    return ${ctx.outputObjectName};
  }
}
