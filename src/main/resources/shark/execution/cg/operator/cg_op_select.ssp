<% escapeMarkup = false %>
#import(shark.execution.cg.row.Constant)
#import(shark.execution.cg.row.CGStruct)
#import(shark.execution.cg.row.CGExprContext)
#import(shark.execution.CGOperator)
#import(shark.execution.CGObjectOperator)
#import(shark.execution.SelectOperator)

<%@ import val cgo: CGOperator %>
<%@ import val op: SelectOperator %>
<%@ import val ctx: CGExprContext %>
<%@ import val cs: shark.execution.cg.row.ExecuteOrderedExprNode %>

package ${packageName};

import shark.execution.cg.OperatorExecutor;
import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
import ${cginputrows(0).fullClassName};
import ${cgrow.fullClassName};

#for(clazz <- ctx.imports)
import ${clazz};
#end
public class ${className} extends OperatorExecutor {
private final ${cgrow.clazz} ${Constant.CG_EXPR_NAME_OUTPUT} = new ${cgrow.clazz}();
  
#for(property <- ctx.properties)
${property.toString}
#end
    @Override
    public ${cginputrows(0).clazz} transform(Object input) {
#if(parentOperators(0).useCG)
    return (${cginputrows(0).clazz})input;
#else
    return ${cginputrows(0).clazz}.BUILD(this.inputOI, input);
#end
    }
   @Override
   public void init(ObjectInspector[] inputOIs) throws Exception {
   super.init(inputOIs);
#for(init <- ctx.initials)
${init.toString}
#end   
   } 
  @Override
  public Object evaluate(Object obj) throws Exception {
    ${cginputrows(0).clazz} ${Constant.CG_EXPR_NAME_INPUT} = transform(obj);

    ${Constant.CG_EXPR_NAME_OUTPUT}.reset();
    
    ${cs.code(ctx)}
    
    return ${Constant.CG_EXPR_NAME_OUTPUT};
  }
}
